{"version":3,"sources":["Button.jsx","SquareContainer.jsx","InputForm.jsx","hooks.js","util.js","InputPage.jsx","Result.jsx","ResultGuide.jsx","ResultPage.jsx","App.js","serviceWorker.js","index.js"],"names":["React","forwardRef","props","ref","className","SquareContainer","square","other","InputForm","onSubmit","useState","imageWidth","setImageWidth","imageHeight","setImageHeight","tileWidthCount","setTileWidthCount","nextIndex","color","1","2","3","4","id","initialColor","setInitialColor","edge","initialEdge","setInitialEdge","imageData","setImageData","iterationCount","setIterationCount","sampleDistance","setSampleDistance","canvasRef","useRef","fileInputRef","handleFileButtonClick","useCallback","event","preventDefault","current","click","handleFileInputChange","reader","FileReader","onload","image","src","result","readAsDataURL","target","files","Image","width","height","context","getContext","drawImage","getImageData","data","handleTileWidthCountChange","value","handleColorChange","name","prev","newColor","Object","assign","handleAddColor","handleEdgeChange","newEdge","handleAddEdge","handleIterationCountChange","handleSampleDistanceChange","handleSubmit","Number","values","type","onChange","Button","onClick","map","_id","key","disabled","toString","useTitle","title","useEffect","document","getMedian","edges","rValues","Array","fill","gValues","bValues","aValues","totalCount","length","currentCount","i","euclideanDistance","slice","console","dir","forEach","index","array","count","getSimplifiedImage","a","async","tileSize","Math","floor","newData","j","k","l","pixel","push","reduce","b","from","concat","x","y","sum","toRGB","alpha","getClusteredImage","matrix","Promise","resolve","clusterize","getResult","centroid","types","splice","repeat","fn","times","distance","initialVector","newCentroidSum","newCentroidCount","item","minIndex","minValue","c","dist","findType","max","InputPage","history","useHistory","convert","parseInt","substr","convertedPixel","pathname","state","Result","rows","style","backgroundColor","paddingBottom","flex","ResultGuide","mapping","keys","minWidth","minHeight","border","marginRight","ResultPage","location","useLocation","clustered","getImage","colorString","goBack","App","basename","process","exact","path","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.988b2036.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default React.forwardRef((props, ref) => {\n    return (\n        <button ref={ref} {...props} className=\"button\" />\n    );\n});","import React from \"react\";\n\nimport \"./SquareContainer.css\";\n\nexport default function SquareContainer({square, other}) {\n    return (\n        <div className=\"square-container\">\n            <div className=\"square-other\">{other}</div>\n            <div className=\"square-block\">{square}</div>\n        </div>\n    );\n}","import React, { useCallback, useState, useRef } from \"react\";\nimport \"./InputPage.css\";\nimport Button from \"./Button\";\nimport SquareContainer from \"./SquareContainer\";\n\nexport default function InputForm({onSubmit}) {\n    const [imageWidth, setImageWidth] = useState(0);\n    const [imageHeight, setImageHeight] = useState(0);\n    const [tileWidthCount, setTileWidthCount] = useState(20);\n    const [initialColor, setInitialColor] = useState({\n        nextIndex: 5,\n        color: {1: '#000000', 2: '#FFFFFF', 3: '#FFFF00', 4: '#FF0000'},\n        id: [1, 2, 3, 4]\n    });\n    const [initialEdge, setInitialEdge] = useState({\n        nextIndex: 1,\n        edge: {},\n        id: []\n    });\n    const [imageData, setImageData] = useState();\n    const [iterationCount, setIterationCount] = useState(50);\n    const [sampleDistance, setSampleDistance] = useState(1);\n    const canvasRef = useRef();\n    const fileInputRef = useRef();\n    const handleFileButtonClick = useCallback((event) => {\n        event.preventDefault();\n        fileInputRef.current.click();\n    }, [fileInputRef]);\n    const handleFileInputChange = useCallback((event) => {\n        const reader = new FileReader();\n        reader.onload = () => image.src = reader.result;\n        reader.readAsDataURL(event.target.files[0]);\n        const image = new Image();\n        image.onload = () => {\n            setImageWidth(image.width);\n            setImageHeight(image.height);\n            if (canvasRef.current) {\n                const context = canvasRef.current.getContext('2d');\n                context.drawImage(image, 0, 0, image.width, image.height);\n                setImageData(context.getImageData(0, 0, image.width, image.height).data);\n            }\n        };\n    }, [canvasRef, setImageData, setImageWidth, setImageHeight]);\n    const handleTileWidthCountChange = useCallback((event) => {\n        setTileWidthCount(event.target.value);\n    }, [setTileWidthCount]);\n    const handleColorChange = useCallback((event) => {\n        event.preventDefault();\n        const name = event.target.name;\n        const value = event.target.value;\n        setInitialColor((prev) => {\n            const newColor = Object.assign({}, prev.color);\n            newColor[name] = value;\n            return {\n                ...prev, color: newColor,\n            }\n        });\n    }, [setInitialColor]);\n    const handleAddColor = useCallback((event) => {\n        event.preventDefault();\n        setInitialColor((prev) => ({\n            ...prev,\n            nextIndex: prev.nextIndex + 1,\n            id: [...prev.id, prev.nextIndex],\n            color: {...prev.color, [prev.nextIndex]: '#000000'},\n        }));\n    }, [setInitialColor]);\n    const handleEdgeChange = useCallback((event) => {\n        event.preventDefault();\n        const name = event.target.name;\n        const value = event.target.value;\n        setInitialEdge((prev) => {\n            const newEdge = Object.assign({}, prev.edge);\n            newEdge[name] = value;\n            return {\n                ...prev, edge: newEdge,\n            }\n        });\n    }, [setInitialEdge]);\n    const handleAddEdge = useCallback((event) => {\n        event.preventDefault();\n        setInitialEdge((prev) => ({\n            ...prev,\n            nextIndex: prev.nextIndex + 1,\n            id: [...prev.id, prev.nextIndex],\n            edge: {...prev.edge, [prev.nextIndex]: '#000000'},\n        }));\n    }, [setInitialEdge]);\n    const handleIterationCountChange = useCallback((event) => {\n        event.preventDefault();\n        setIterationCount(event.target.value);\n    }, []);\n    const handleSampleDistanceChange = useCallback((event) => {\n        event.preventDefault();\n        setSampleDistance(event.target.value);\n    }, []);\n    const handleSubmit = useCallback((event) => {\n        event.preventDefault();\n        onSubmit && onSubmit(\n            imageData,\n            imageWidth,\n            imageHeight,\n            Number(tileWidthCount),\n            Object.values(initialColor.color),\n            Object.values(initialEdge.edge),\n            Number(iterationCount),\n            Number(sampleDistance),\n        );\n    }, [\n        onSubmit,\n        tileWidthCount,\n        imageData,\n        imageWidth,\n        imageHeight,\n        initialColor,\n        initialEdge,\n        iterationCount,\n        sampleDistance\n    ]);\n    \n    return (\n        <SquareContainer\n            other={<form className=\"form\" onSubmit={handleSubmit}>\n                <input className=\"hidden\" ref={fileInputRef} type=\"file\" onChange={handleFileInputChange} />\n                <Button onClick={handleFileButtonClick}>Choose an image</Button>\n                <div>\n                    <label>Width:</label>\n                    <input\n                        type=\"number\"\n                        onChange={handleTileWidthCountChange}\n                        value={tileWidthCount}\n                    />\n                </div>\n                <div>\n                    <label>Iteration Count:</label>\n                    <input\n                        type=\"number\"\n                        onChange={handleIterationCountChange}\n                        value={iterationCount}\n                    />\n                </div>\n                <div>\n                    <label>Sample Distance:</label>\n                    <input\n                        type=\"number\"\n                        onChange={handleSampleDistanceChange}\n                        value={sampleDistance}\n                    />\n                </div>\n                <div>\n                    <Button onClick={handleAddColor}>Add color</Button>\n                    {initialColor.id.map((_id) =>\n                        <input\n                            key={`color_${_id}`}\n                            type=\"color\"\n                            value={initialColor.color[_id]}\n                            name={_id}\n                            onChange={handleColorChange}\n                        />\n                    )}\n                </div>\n                <div>\n                    <Button onClick={handleAddEdge}>Add Edge</Button>\n                    {initialEdge.id.map((_id) =>\n                        <input\n                            key={`edge_${_id}`}\n                            type=\"color\"\n                            value={initialEdge.edge[_id]}\n                            name={_id}\n                            onChange={handleEdgeChange}\n                        />\n                    )}\n                </div>\n                <Button disabled={!imageData} type=\"submit\">\n                    Submit\n                </Button>\n            </form>}\n            square={\n                <div className=\"overflow-scroll full\">\n                    <canvas\n                        ref={canvasRef}\n                        width={imageWidth.toString()}\n                        height={imageHeight.toString()}\n                    />\n                </div>\n            }\n        />    \n    );\n}","import React, { useEffect } from 'react';\n\nexport const useTitle = (title) => {\n    useEffect(() => {\n        document.title = title;\n    }, [title]);\n};","export function averageData(data) {\n    var sumR = 0;\n    var sumG = 0;\n    var sumB = 0;\n    var sumAlpha = 0;\n    const length = data.length / 4;\n    data.forEach((value, index) => {\n        switch (index % 4) {\n            case 0:\n                sumR += value;\n                break;\n                \n            case 1:\n                sumG += value;\n                break;\n                \n            case 2:\n                sumB += value;\n                break;\n                \n            case 3:\n                sumAlpha += value;\n                break;\n                \n            default:\n                break;\n        }\n    });\n    return [sumR, sumG, sumB, sumAlpha].map((value) => value/length);\n}\n\nexport function getMedian(data, edges) {\n    // rValue means r in rgba, not related to l-values and r-values\n    const rValues = new Array(256).fill(0);\n    const gValues = new Array(256).fill(0);\n    const bValues = new Array(256).fill(0);\n    const aValues = new Array(256).fill(0);\n    \n    for (const edge of edges) {\n        const totalCount = data.length / 4;\n        let currentCount = 0;\n        for (let i=0; i<data.length; i+=4) {\n            const pixel = data.slice(i, i+4);\n            if (euclideanDistance(pixel, edge) < 30) {\n                currentCount++;\n            }\n        }\n        if (currentCount > 0.03 * totalCount) {\n            console.dir({currentCount, totalCount});\n            return edge;\n        }\n    }\n    \n    data.forEach((value, index) => {\n        switch (index % 4) {\n            case 0:\n                rValues[value]++;\n                break;\n                \n            case 1:\n                gValues[value]++;\n                break;\n                \n            case 2:\n                bValues[value]++;\n                break;\n                \n            case 3:\n                aValues[value]++;\n                break;\n                \n            default:\n                break;\n        }\n    });\n    \n    return [rValues, gValues, bValues, aValues].map((array) => {\n        let count = 0;\n        for (let i=0; i<256; i++) {\n            count += array[i];\n            if (count >= data.length / 8) {\n                return i;\n            }\n        }\n        return 255;\n    })\n}\n\nexport async function getSimplifiedImage(data, imageWidth, imageHeight, width, sampleDistance, initialEdge) {\n    const tileSize = Math.floor(imageWidth/width);\n    const height = Math.floor(imageHeight/tileSize);\n    const newData = new Array(width*height);\n    // truncate image at bottom\n    for (var i=0; i<height; i++) {\n        for (var j=0; j<width; j++) {\n            // find out which tile the pixel belongs to\n            for (var k=i*tileSize; k<(i+1)*tileSize; k+=sampleDistance) {\n                for (var l=j*tileSize; l<(j+1)*tileSize; l+=sampleDistance) {\n                    if (!newData[i*width+j]) {\n                        newData[i*width+j] = [];\n                    }\n                    const pixel = k*imageWidth + l;\n                    newData[i*width+j].push(data.slice(4*pixel, 4*pixel+4));\n                }\n            }\n        }\n    }\n    return newData.map((array) => getMedian(array.reduce((a, b) => Array.from(a).concat(Array.from(b))), initialEdge))\n                  .reduce((a, b) => a.concat(b));\n}\n\nfunction euclideanDistance(x, y) {\n    let sum = 0;\n    for (let i=0; i<3; i++) {\n        sum += (x[i] - y[i]) * (x[i] - y[i]);\n    }\n    return sum;\n}\n    \nexport function toRGB(pixel) {\n    const alpha = pixel[3]/255;\n    return alpha ? [pixel[0]*alpha, pixel[1]*alpha, pixel[2]*alpha, 255] : new Array(4).fill(255);\n};\n\nexport async function getClusteredImage(data, initialColor, iterationCount) {\n    const matrix = [];\n    \n    for (var i=0; i<data.length; i+=4) {\n        matrix.push(toRGB(data.slice(i, i+4)));\n    }\n    return new Promise((resolve) => resolve(clusterize(matrix, euclideanDistance, initialColor, iterationCount)));\n}\n\nexport async function getResult(data, initialColor, iterationCount) {\n    const { centroid, types } = await getClusteredImage(data, initialColor, iterationCount);\n    for (const index in types) {\n        data.splice(index*4, 4, ...centroid[types[index]]);\n    }\n    return await data;\n}\n\nconst repeat = (fn, times) => {\n    for (let i=0; i<times; i++) {\n        fn(i);\n    }\n};\n\nexport function clusterize(matrix, distance, initialVector, iterationCount) {\n    let centroid = initialVector;\n    const types = matrix.map((color, index) => 0);\n    const findType = (item, centroid, distance) => {\n        let minIndex = -1;\n        let minValue = -1;\n        centroid.forEach((c, index) => {\n            const dist = distance(item, c);\n            if (dist < minValue || minValue === -1) {\n                minIndex = index;\n                minValue = dist;\n            }\n        });\n        return minIndex;\n    };\n    const k = initialVector.length;\n    repeat(() => {\n        const newCentroidSum = new Array(k).fill(new Array(initialVector[0].length).fill(0));\n        const newCentroidCount = new Array(k).fill(0);\n        for (let i=0; i<matrix.length; i++) {\n            const type = findType(matrix[i], centroid, distance);\n            types[i] = type;\n            newCentroidSum[type] = newCentroidSum[type].map((value, index) => value + matrix[i][index]);\n            newCentroidCount[type]++;\n        }\n        centroid = newCentroidSum.map((value, type) => value.map((color) => color / Math.max(1, newCentroidCount[type])));\n    }, iterationCount);\n    return { centroid, types };\n}\n","import React, { useCallback } from \"react\";\nimport InputForm from \"./InputForm\";\nimport { useTitle } from \"./hooks\";\nimport { toRGB } from \"./util\";\n\nimport { useHistory } from 'react-router-dom';\n\nexport default function InputPage(props) {\n    const history = useHistory();\n    const convert = useCallback((initialColor) => {\n        return initialColor.map((color) => {\n            return [\n                parseInt(color.substr(1,2), 16),\n                parseInt(color.substr(3,2), 16),\n                parseInt(color.substr(5,2), 16),\n                255,\n            ];\n        });\n    }, []);\n    const onSubmit = useCallback(\n        (\n            data,\n            imageWidth,\n            imageHeight,\n            width,\n            initialColor,\n            initialEdge,\n            iterationCount,\n            sampleDistance\n        ) => {\n        for (let i=0; i<data.length; i+=4) {\n            const convertedPixel = toRGB(data.slice(i, i+4));\n            data[i] = convertedPixel[0];\n            data[i+1] = convertedPixel[1];\n            data[i+2] = convertedPixel[2];\n            data[i+3] = convertedPixel[3];\n        }\n            \n        history.push({\n            pathname: \"/result\",\n            state: {\n                data,\n                imageWidth,\n                imageHeight,\n                width,\n                initialColor: convert(initialColor),\n                initialEdge: convert(initialEdge),\n                iterationCount,\n                sampleDistance,\n            },\n        });\n    }, [history, convert]);\n    \n    useTitle(\"Pixelator\");\n    \n    return (\n        <div className=\"container\">\n            <InputForm onSubmit={onSubmit} />\n        </div>\n    );\n}","import React from 'react';\nimport './Result.css';\n\nexport default function Result(props) {\n    const { data, width, height } = props;\n    if (!data) return <div />;\n    const rows = [];\n    for (var i=0; i<height; i++) {\n        rows.push([]);\n        for (var j=0; j<width; j++) {\n            const index = 4*(i*width+j);\n            const pixel = data.slice(index, index+4);\n            rows[i].push(\n                <div key={`${i} ${j}`} style={\n                    {\n                        backgroundColor: `rgb(${pixel[0]}, ${pixel[1]}, ${pixel[2]}, ${pixel[3]})`,\n                        width: `calc(100% / ${width})`,\n                        paddingBottom: `calc(100% / ${width})`,\n                        flex: \"0 0 auto\",\n                    }\n                } />\n            )\n        }\n    }\n    \n    return (\n        <div className=\"result-container\">\n            {rows.map(((array, index) => \n                <div className=\"result-line\" key={index.toString()}>{array}</div>      \n            ))}\n        </div>\n    )\n}","import React from \"react\";\n\nimport \"./ResultGuide.css\";\n\nexport default function ResultGuide({mapping}) {\n    return (\n        <div className=\"result-guide-container\">\n            {Object.keys(mapping).map((color) =>\n                <div className=\"result-guide-item\">\n                    <div style={{\n                        backgroundColor: color,\n                        width: \"50px\",\n                        height: \"50px\",\n                        minWidth: \"50px\",\n                        minHeight: \"50px\",\n                        border: \"1px solid black\",\n                        marginRight: \"8px\",\n                    }} />\n                    <p>{mapping[color]}</p>\n                </div>\n            )}\n        </div>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport SquareContainer from './SquareContainer';\nimport Button from './Button';\nimport Result from './Result';\nimport ResultGuide from './ResultGuide';\nimport { getSimplifiedImage, getResult } from './util';\nimport { useTitle } from \"./hooks\";\n\nexport default function ResultPage(props) {\n    const location = useLocation();\n    const history = useHistory();\n    const state = location.state;\n    const {\n        data,\n        imageWidth,\n        imageHeight,\n        width,\n        initialColor,\n        initialEdge,\n        iterationCount,\n        sampleDistance,\n    } = state;\n    const [imageData, setImageData] = useState();\n    \n    useTitle(\"Pixelator | Result\");\n    useEffect(() => {\n        const getImage = async () => {\n            const image = await getSimplifiedImage(data, imageWidth, imageHeight, width, sampleDistance, initialEdge);\n            const clustered = await getResult(image, initialColor, iterationCount);\n            setImageData(clustered);\n        };\n        getImage();\n    }, [\n        data,\n        imageWidth,\n        imageHeight,\n        width,\n        initialColor,\n        initialEdge,\n        iterationCount,\n        sampleDistance\n    ]);\n    \n    const mapping = {};\n    if (imageData) {\n        for (var i=0; i<imageData.length; i+=4) {\n            const colorString = `rgb(${imageData[i]}, ${imageData[i+1]}, ${imageData[i+2]})`;\n            if (mapping[colorString]) {\n                mapping[colorString]++;\n            } else {\n                mapping[colorString] = 1;\n            }\n        }\n    }\n    \n    return (\n        <>\n            <SquareContainer\n                square={\n                    <Result\n                        data={imageData}\n                        width={width}\n                        height={Math.floor(imageHeight/Math.floor(imageWidth/width))}\n                    />\n                }\n                other={\n                    <>\n                        <Button onClick={history.goBack}>Go Back</Button>\n                        <ResultGuide mapping={mapping} />\n                    </>\n                }\n            />\n        </>\n    );\n}","import React from 'react';\nimport InputPage from './InputPage';\nimport ResultPage from './ResultPage';\nimport './App.css';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route exact={true} path=\"/result\">\n                    <ResultPage />\n                </Route>\n                <Route exact={true} path=\"/\">\n                    <InputPage />\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}