{"version":3,"sources":["TopBar.jsx","Button.jsx","RoundedButton.jsx","SquareContainer.jsx","SettingItem.jsx","hooks.js","InputForm.jsx","util.js","InputPage.jsx","Result.jsx","ResultGuide.jsx","ResultPage.jsx","AboutPage.jsx","reducer.js","defaultState.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","className","to","React","forwardRef","props","ref","SquareContainer","square","other","SettingItem","name","children","end","useTitle","title","useEffect","document","useAction","type","dispatch","useContext","DispatchContext","useCallback","payload","useSelector","selector","AppContext","InputForm","onSubmit","state","settings","data","defaultWidth","width","initialImageWidth","imageWidth","initialImageHeight","imageHeight","defaultInitialColor","initialColor","defaultInitialEdge","initialEdge","defaultIterationCount","iterationCount","defaultSampleDistance","sampleDistance","useState","setImageWidth","setImageHeight","tileWidthCount","setTileWidthCount","nextIndex","length","color","map","value","index","reduce","a","b","Object","assign","id","Array","fill","setInitialColor","console","dir","edge","setInitialEdge","imageData","setImageData","setIterationCount","setSampleDistance","canvasRef","useRef","fileInputRef","handleFileButtonClick","event","preventDefault","current","click","handleFileInputChange","reader","FileReader","onload","image","src","result","readAsDataURL","target","files","Image","height","context","getContext","drawImage","getImageData","Math","ceil","max","handleTileWidthCountChange","handleColorChange","prev","newColor","handleAddColor","handleRemoveColor","prevId","lastId","pop","prevColor","handleEdgeChange","newEdge","handleAddEdge","handleRemoveEdge","prevEdge","handleIterationCountChange","handleSampleDistanceChange","handleSubmit","Number","values","putImageData","ImageData","onChange","Button","onClick","RoundedButton","_id","key","disabled","toString","getMedian","edges","rValues","gValues","bValues","aValues","totalCount","currentCount","i","euclideanDistance","slice","forEach","array","count","getSimplifiedImage","async","tileSize","floor","newData","j","k","l","pixel","push","from","concat","x","y","sum","toRGB","alpha","getClusteredImage","matrix","Promise","resolve","clusterize","getResult","centroid","types","splice","repeat","fn","times","distance","initialVector","newCentroidSum","newCentroidCount","item","minIndex","minValue","c","dist","findType","InputPage","history","useHistory","saveSettings","convertedPixel","pathname","Result","rows","style","backgroundColor","paddingBottom","flex","ResultGuide","mapping","keys","minWidth","minHeight","border","marginRight","ResultPage","convert","parseInt","substr","rawInitialColor","rawInitialEdge","useMemo","clustered","getImage","colorString","AboutPage","reducer","action","defaultState","createContext","App","useReducer","Provider","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e35e136.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nimport \"./TopBar.css\";\n\nexport default function TopBar() {\n    return (\n        <div className=\"top-bar\">\n            <p className=\"title\">Pixelator</p>\n            <Link to=\"/\">\n                <p className=\"link\">Home</p>\n            </Link>\n            <Link to=\"/about\">\n                <p className=\"link\">About</p>\n            </Link>\n        </div>\n    )\n}","import React from \"react\";\n\nexport default React.forwardRef((props, ref) => {\n    return (\n        <button ref={ref} {...props} className=\"button\" />\n    );\n});","import React from \"react\";\n\nexport default React.forwardRef((props, ref) => {\n    return (\n        <button ref={ref} {...props} className=\"button rounded\" />\n    );\n});","import React from \"react\";\n\nimport \"./SquareContainer.css\";\n\nexport default function SquareContainer({square, other}) {\n    return (\n        <div className=\"square-container\">\n            <div className=\"square-other\">{other}</div>\n            <div className=\"square-block\">{square}</div>\n        </div>\n    );\n}","import React from 'react';\n\nimport \"./SettingItem.css\";\n\nexport default function SettingItem({name, children, end}) {\n    return (\n        <div className=\"flex-container\">\n            <p className=\"flex-fixed setting-name\">{name}</p>\n            <div className=\"flex-expand\">{children}</div>\n            <div className=\"flex-fixed setting-end\">{end}</div>\n        </div>\n    );\n}","import { useEffect, useContext, useCallback } from 'react';\n\nimport { AppContext, DispatchContext } from './App';\n\nexport const useTitle = (title) => {\n    useEffect(() => {\n        document.title = title;\n    }, [title]);\n};\n\nexport const useAction = (type) => {\n    const dispatch = useContext(DispatchContext);\n    \n    return useCallback((payload) => {\n        dispatch({\n            type,\n            payload,\n        });\n    }, [dispatch, type]);\n};\n\nexport const useSelector = (selector) => {\n    const state = useContext(AppContext);\n    \n    return selector(state);\n};","import React, { useEffect, useCallback, useState, useRef } from \"react\";\nimport \"./InputPage.css\";\nimport Button from \"./Button\";\nimport RoundedButton from \"./RoundedButton\";\nimport SquareContainer from \"./SquareContainer\";\nimport SettingItem from \"./SettingItem\";\nimport { useSelector } from './hooks';\n\nexport default function InputForm({onSubmit}) {\n    const {\n        data,\n        width: defaultWidth,\n        imageWidth: initialImageWidth,\n        imageHeight: initialImageHeight,\n        initialColor: defaultInitialColor,\n        initialEdge: defaultInitialEdge,\n        iterationCount: defaultIterationCount,\n        sampleDistance: defaultSampleDistance,\n    } = useSelector((state) => state.settings);\n    const [imageWidth, setImageWidth] = useState(initialImageWidth);\n    const [imageHeight, setImageHeight] = useState(initialImageHeight);\n    const [tileWidthCount, setTileWidthCount] = useState(defaultWidth);\n    const [initialColor, setInitialColor] = useState({\n        nextIndex: defaultInitialColor.length,\n        color: defaultInitialColor.map((value, index) => ({[index]: value})).reduce((a, b) => Object.assign({}, a, b), {}),\n        id: new Array(defaultInitialColor.length).fill(0).map((value, index) => index),\n    });console.dir(initialColor);\n    const [initialEdge, setInitialEdge] = useState({\n        nextIndex: defaultInitialEdge.length,\n        edge: defaultInitialEdge.map((value, index) => ({[index]: value})).reduce((a, b) => Object.assign({}, a, b), {}),\n        id: new Array(defaultInitialEdge.length).fill(0).map((value, index) => index),\n    });\n    const [imageData, setImageData] = useState(data);\n    const [iterationCount, setIterationCount] = useState(defaultIterationCount);\n    const [sampleDistance, setSampleDistance] = useState(defaultSampleDistance);\n    const canvasRef = useRef();\n    const fileInputRef = useRef();\n    const handleFileButtonClick = useCallback((event) => {\n        event.preventDefault();\n        fileInputRef.current.click();\n    }, [fileInputRef]);\n    const handleFileInputChange = useCallback((event) => {\n        const reader = new FileReader();\n        reader.onload = () => image.src = reader.result;\n        reader.readAsDataURL(event.target.files[0]);\n        const image = new Image();\n        image.onload = () => {\n            setImageWidth(image.width);\n            setImageHeight(image.height);\n            if (canvasRef.current) {\n                const context = canvasRef.current.getContext('2d');\n                context.drawImage(image, 0, 0, image.width, image.height);\n                setImageData(context.getImageData(0, 0, image.width, image.height).data);\n                setSampleDistance(Math.ceil(Math.max(image.width, image.height) / 50));\n            }\n        };\n    }, [canvasRef, setImageData, setImageWidth, setImageHeight]);\n    const handleTileWidthCountChange = useCallback((event) => {\n        setTileWidthCount(event.target.value);\n    }, [setTileWidthCount]);\n    const handleColorChange = useCallback((event) => {\n        event.preventDefault();\n        const name = event.target.name;\n        const value = event.target.value;\n        setInitialColor((prev) => {\n            const newColor = Object.assign({}, prev.color);\n            newColor[name] = value;\n            return {\n                ...prev, color: newColor,\n            }\n        });\n    }, [setInitialColor]);\n    const handleAddColor = useCallback((event) => {\n        event.preventDefault();\n        setInitialColor((prev) => ({\n            ...prev,\n            nextIndex: prev.nextIndex +1,\n            id: [...prev.id, prev.nextIndex],\n            color: {...prev.color, [prev.nextIndex]: '#000000'},\n        }));\n    }, [setInitialColor]);\n    const handleRemoveColor = useCallback((event) => {\n        event.preventDefault();\n        setInitialColor((prev) => {\n            const prevId = prev.id;\n            const lastId = prevId.pop();\n            const prevColor = prev.color;\n            delete prevColor[lastId];\n            return {\n                ...prev,\n                color: prevColor,\n                id: prevId,\n            };\n        });\n    }, [setInitialColor]);\n    const handleEdgeChange = useCallback((event) => {\n        event.preventDefault();\n        const name = event.target.name;\n        const value = event.target.value;\n        setInitialEdge((prev) => {\n            const newEdge = Object.assign({}, prev.edge);\n            newEdge[name] = value;\n            return {\n                ...prev, edge: newEdge,\n            }\n        });\n    }, [setInitialEdge]);\n    const handleAddEdge = useCallback((event) => {\n        event.preventDefault();\n        setInitialEdge((prev) => ({\n            ...prev,\n            nextIndex: prev.nextIndex +1,\n            id: [...prev.id, prev.nextIndex],\n            edge: {...prev.edge, [prev.nextIndex]: '#000000'},\n        }));\n    }, [setInitialEdge]);\n    const handleRemoveEdge = useCallback((event) => {\n        event.preventDefault();\n        setInitialEdge((prev) => {\n            const prevId = prev.id;\n            const lastId = prevId.pop();\n            const prevEdge = prev.edge;\n            delete prevEdge[lastId];\n            return {\n                ...prev,\n                edge: prevEdge,\n                id: prevId,\n            };\n        });\n    }, [setInitialEdge]);\n    const handleIterationCountChange = useCallback((event) => {\n        event.preventDefault();\n        setIterationCount(event.target.value);\n    }, []);\n    const handleSampleDistanceChange = useCallback((event) => {\n        event.preventDefault();\n        setSampleDistance(event.target.value);\n    }, []);\n    const handleSubmit = useCallback((event) => {\n        event.preventDefault();\n        onSubmit && onSubmit(\n            imageData,\n            imageWidth,\n            imageHeight,\n            Number(tileWidthCount),\n            Object.values(initialColor.color),\n            Object.values(initialEdge.edge),\n            Number(iterationCount),\n            Number(sampleDistance),\n        );\n    }, [\n        onSubmit,\n        tileWidthCount,\n        imageData,\n        imageWidth,\n        imageHeight,\n        initialColor,\n        initialEdge,\n        iterationCount,\n        sampleDistance\n    ]);\n    \n    useEffect(() => {\n        if (imageData) {\n            const context = canvasRef.current.getContext('2d');\n            context.putImageData(new ImageData(imageData, imageWidth, imageHeight), 0, 0);\n        }\n    }, []);\n        \n    return (\n        <SquareContainer\n            other={<form className=\"form normal-page-padding\" onSubmit={handleSubmit}>\n                <div className=\"dummy-height\" />\n                <h1>Instructions</h1>\n                <div className=\"normal-padding\">\n                    <p>Select an image with few colors and sufficiently wide margin.</p>\n                    <p>Choose the main colors in the image.</p>\n                    <p>Choose the color of the edge if necessary.</p>\n                    <p>Increase sample distance if the calculation is too slow.</p>\n                </div>\n                <SettingItem name=\"Image\">\n                    <input className=\"hidden\" ref={fileInputRef} type=\"file\" onChange={handleFileInputChange} />\n                    <Button onClick={handleFileButtonClick}>Choose an image</Button>\n                </SettingItem>\n                <SettingItem name=\"Tile width\">\n                    <input\n                        type=\"number\"\n                        onChange={handleTileWidthCountChange}\n                        value={tileWidthCount}\n                    />\n                </SettingItem>\n                <SettingItem name=\"Iteration Count\">\n                    <input\n                        type=\"number\"\n                        onChange={handleIterationCountChange}\n                        value={iterationCount}\n                    />\n                </SettingItem>\n                <SettingItem name=\"Sample Distance\">\n                    <input\n                        type=\"number\"\n                        onChange={handleSampleDistanceChange}\n                        value={sampleDistance}\n                    />\n                </SettingItem>\n                <SettingItem name=\"Color\" end={\n                    <>\n                        <RoundedButton onClick={handleAddColor}>+</RoundedButton>\n                        <RoundedButton onClick={handleRemoveColor}>-</RoundedButton>\n                    </>\n                }>\n                    {initialColor.id.map((_id) =>\n                        <input\n                            key={`color_${_id}`}\n                            type=\"color\"\n                            value={initialColor.color[_id]}\n                            name={_id}\n                            onChange={handleColorChange}\n                        />\n                    )}\n                </SettingItem>\n                <SettingItem name=\"Edge\" end={\n                    <>\n                        <RoundedButton onClick={handleAddEdge}>+</RoundedButton>\n                        <RoundedButton onClick={handleRemoveEdge}>-</RoundedButton>\n                    </>}>\n                    {initialEdge.id.map((_id) =>\n                        <input\n                            key={`edge_${_id}`}\n                            type=\"color\"\n                            value={initialEdge.edge[_id]}\n                            name={_id}\n                            onChange={handleEdgeChange}\n                        />\n                    )}\n                </SettingItem>\n                <div className=\"normal-padding\">\n                    <Button disabled={!imageData} type=\"submit\">\n                        Submit\n                    </Button>\n                </div>\n            </form>}\n            square={\n                <div className=\"overflow-scroll full\">\n                    <div className=\"dummy-height\" />\n                    <canvas\n                        ref={canvasRef}\n                        width={imageWidth.toString()}\n                        height={imageHeight.toString()}\n                    />\n                </div>\n            }\n        />    \n    );\n}","export function averageData(data) {\n    var sumR = 0;\n    var sumG = 0;\n    var sumB = 0;\n    var sumAlpha = 0;\n    const length = data.length / 4;\n    data.forEach((value, index) => {\n        switch (index % 4) {\n            case 0:\n                sumR += value;\n                break;\n                \n            case 1:\n                sumG += value;\n                break;\n                \n            case 2:\n                sumB += value;\n                break;\n                \n            case 3:\n                sumAlpha += value;\n                break;\n                \n            default:\n                break;\n        }\n    });\n    return [sumR, sumG, sumB, sumAlpha].map((value) => value/length);\n}\n\nexport function getMedian(data, edges) {\n    // rValue means r in rgba, not related to l-values and r-values\n    const rValues = new Array(256).fill(0);\n    const gValues = new Array(256).fill(0);\n    const bValues = new Array(256).fill(0);\n    const aValues = new Array(256).fill(0);\n    \n    for (const edge of edges) {\n        const totalCount = data.length / 4;\n        let currentCount = 0;\n        for (let i=0; i<data.length; i+=4) {\n            const pixel = data.slice(i, i+4);\n            if (euclideanDistance(pixel, edge) < 30) {\n                currentCount++;\n            }\n        }\n        if (currentCount > 0.03 * totalCount) {\n            return edge;\n        }\n    }\n    \n    data.forEach((value, index) => {\n        switch (index % 4) {\n            case 0:\n                rValues[value]++;\n                break;\n                \n            case 1:\n                gValues[value]++;\n                break;\n                \n            case 2:\n                bValues[value]++;\n                break;\n                \n            case 3:\n                aValues[value]++;\n                break;\n                \n            default:\n                break;\n        }\n    });\n    \n    return [rValues, gValues, bValues, aValues].map((array) => {\n        let count = 0;\n        for (let i=0; i<256; i++) {\n            count += array[i];\n            if (count >= data.length / 8) {\n                return i;\n            }\n        }\n        return 255;\n    })\n}\n\nexport async function getSimplifiedImage(data, imageWidth, imageHeight, width, sampleDistance, initialEdge) {\n    const tileSize = Math.floor(imageWidth/width);\n    const height = Math.floor(imageHeight/tileSize);\n    const newData = new Array(width*height);\n    // truncate image at bottom\n    for (var i=0; i<height; i++) {\n        for (var j=0; j<width; j++) {\n            // find out which tile the pixel belongs to\n            for (var k=i*tileSize; k<(i+1)*tileSize; k+=sampleDistance) {\n                for (var l=j*tileSize; l<(j+1)*tileSize; l+=sampleDistance) {\n                    if (!newData[i*width+j]) {\n                        newData[i*width+j] = [];\n                    }\n                    const pixel = k*imageWidth + l;\n                    newData[i*width+j].push(data.slice(4*pixel, 4*pixel+4));\n                }\n            }\n        }\n    }\n    return newData.map((array) => getMedian(array.reduce((a, b) => Array.from(a).concat(Array.from(b))), initialEdge))\n                  .reduce((a, b) => a.concat(b));\n}\n\nfunction euclideanDistance(x, y) {\n    let sum = 0;\n    for (let i=0; i<3; i++) {\n        sum += (x[i] - y[i]) * (x[i] - y[i]);\n    }\n    return sum;\n}\n    \nexport function toRGB(pixel) {\n    const alpha = pixel[3]/255;\n    return alpha ? [pixel[0]*alpha, pixel[1]*alpha, pixel[2]*alpha, 255] : new Array(4).fill(255);\n};\n\nexport async function getClusteredImage(data, initialColor, iterationCount) {\n    const matrix = [];\n    \n    for (var i=0; i<data.length; i+=4) {\n        matrix.push(toRGB(data.slice(i, i+4)));\n    }\n    return new Promise((resolve) => resolve(clusterize(matrix, euclideanDistance, initialColor, iterationCount)));\n}\n\nexport async function getResult(data, initialColor, iterationCount) {\n    const { centroid, types } = await getClusteredImage(data, initialColor, iterationCount);\n    for (const index in types) {\n        data.splice(index*4, 4, ...centroid[types[index]]);\n    }\n    return await data;\n}\n\nconst repeat = (fn, times) => {\n    for (let i=0; i<times; i++) {\n        fn(i);\n    }\n};\n\nexport function clusterize(matrix, distance, initialVector, iterationCount) {\n    let centroid = initialVector;\n    const types = matrix.map((color, index) => 0);\n    const findType = (item, centroid, distance) => {\n        let minIndex = -1;\n        let minValue = -1;\n        centroid.forEach((c, index) => {\n            const dist = distance(item, c);\n            if (dist < minValue || minValue === -1) {\n                minIndex = index;\n                minValue = dist;\n            }\n        });\n        return minIndex;\n    };\n    const k = initialVector.length;\n    repeat(() => {\n        const newCentroidSum = new Array(k).fill(new Array(initialVector[0].length).fill(0));\n        const newCentroidCount = new Array(k).fill(0);\n        for (let i=0; i<matrix.length; i++) {\n            const type = findType(matrix[i], centroid, distance);\n            types[i] = type;\n            newCentroidSum[type] = newCentroidSum[type].map((value, index) => value + matrix[i][index]);\n            newCentroidCount[type]++;\n        }\n        centroid = newCentroidSum.map((value, type) => {\n            if (newCentroidCount[type] !== 0) {\n                return value.map((color) => color / newCentroidCount[type]);\n            } else {\n                return centroid[type];\n            }\n        });\n    }, iterationCount);\n    return { centroid, types };\n}\n","import React, { useCallback } from \"react\";\nimport InputForm from \"./InputForm\";\nimport { useTitle, useAction } from \"./hooks\";\nimport { toRGB } from \"./util\";\n\nimport { useHistory } from 'react-router-dom';\n\nexport default function InputPage(props) {\n    const history = useHistory();\n    const saveSettings = useAction('save_settings');\n    const onSubmit = useCallback(\n        (\n            data,\n            imageWidth,\n            imageHeight,\n            width,\n            initialColor,\n            initialEdge,\n            iterationCount,\n            sampleDistance\n        ) => {\n        saveSettings({\n            data,\n            imageWidth,\n            imageHeight,\n            width,\n            initialColor,\n            initialEdge,\n            iterationCount,\n            sampleDistance,\n        });\n        for (let i=0; i<data.length; i+=4) {\n            const convertedPixel = toRGB(data.slice(i, i+4));\n            data[i] = convertedPixel[0];\n            data[i+1] = convertedPixel[1];\n            data[i+2] = convertedPixel[2];\n            data[i+3] = convertedPixel[3];\n        }\n        history.push({\n            pathname: \"/result\",\n        });\n    }, [history, saveSettings]);\n    \n    useTitle(\"Pixelator\");\n    \n    return (\n        <InputForm onSubmit={onSubmit} />\n    );\n}","import React from 'react';\nimport './Result.css';\n\nexport default function Result(props) {\n    const { data, width, height } = props;\n    if (!data) return <div />;\n    const rows = [];\n    for (var i=0; i<height; i++) {\n        rows.push([]);\n        for (var j=0; j<width; j++) {\n            const index = 4*(i*width+j);\n            const pixel = data.slice(index, index+4);\n            rows[i].push(\n                <div key={`${i} ${j}`} style={\n                    {\n                        backgroundColor: `rgb(${pixel[0]}, ${pixel[1]}, ${pixel[2]}, ${pixel[3]})`,\n                        width: `calc(100% / ${width})`,\n                        paddingBottom: `calc(100% / ${width})`,\n                        flex: \"0 0 auto\",\n                    }\n                } />\n            )\n        }\n    }\n    \n    return (\n        <div>\n            {rows.map(((array, index) => \n                <div className=\"result-line\" key={index.toString()}>{array}</div>      \n            ))}\n        </div>\n    )\n}","import React from \"react\";\n\nimport \"./ResultGuide.css\";\n\nexport default function ResultGuide({mapping}) {\n    return (\n        <div className=\"result-guide-container normal-page-padding\">\n            {Object.keys(mapping).map((color) =>\n                <div\n                    key={color.toString()}\n                    className=\"result-guide-item\"\n                >\n                    <div style={{\n                        backgroundColor: color,\n                        width: \"50px\",\n                        height: \"50px\",\n                        minWidth: \"50px\",\n                        minHeight: \"50px\",\n                        border: \"1px solid black\",\n                        marginRight: \"8px\",\n                    }}/>\n                    <p>{mapping[color]}</p>\n                </div>\n            )}\n        </div>\n    );\n}","import React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport SquareContainer from './SquareContainer';\nimport Result from './Result';\nimport ResultGuide from './ResultGuide';\nimport { getSimplifiedImage, getResult } from './util';\nimport { useTitle, useSelector } from \"./hooks\";\n\nexport default function ResultPage(props) {\n    const convert = useCallback((initialColor) => {\n        return initialColor.map((color) => {\n            return [\n                parseInt(color.substr(1,2), 16),\n                parseInt(color.substr(3,2), 16),\n                parseInt(color.substr(5,2), 16),\n                255,\n            ];\n        });\n    }, []);\n    const {\n        data,\n        imageWidth,\n        imageHeight,\n        width,\n        initialColor: rawInitialColor,\n        initialEdge: rawInitialEdge,\n        iterationCount,\n        sampleDistance,\n    } = useSelector((state) => state.settings);\n    const initialColor = useMemo(() => convert(rawInitialColor), [convert, rawInitialColor]);\n    const initialEdge = useMemo(() => convert(rawInitialEdge), [convert, rawInitialEdge]);\n    const [imageData, setImageData] = useState();\n    \n    useTitle(\"Pixelator | Result\");\n    useEffect(() => {\n        const getImage = async () => {\n            const image = await getSimplifiedImage(data, imageWidth, imageHeight, width, sampleDistance, initialEdge);\n            const clustered = await getResult(image, initialColor, iterationCount);\n            setImageData(clustered);\n        };\n        data && getImage();\n    }, [\n        data,\n        imageWidth,\n        imageHeight,\n        width,\n        initialColor,\n        initialEdge,\n        iterationCount,\n        sampleDistance\n    ]);\n    \n    const mapping = {};\n    if (imageData) {\n        for (var i=0; i<imageData.length; i+=4) {\n            const colorString = `rgb(${imageData[i]}, ${imageData[i+1]}, ${imageData[i+2]})`;\n            if (mapping[colorString]) {\n                mapping[colorString]++;\n            } else {\n                mapping[colorString] = 1;\n            }\n        }\n    }\n    \n    return (\n        data ? \n            <SquareContainer\n                square={\n                    <>\n                        <div className=\"dummy-height\" />\n                        <Result\n                            data={imageData}\n                            width={width}\n                            height={Math.floor(imageHeight/Math.floor(imageWidth/width))}\n                        />\n                    </>\n                }\n                other={\n                    <div className=\"normal-page-padding\">\n                        <div className=\"dummy-height\" />\n                        <ResultGuide mapping={mapping} />\n                    </div>\n                }\n            />\n        :\n            <Redirect to=\"/\" />\n    );\n}","import React from \"react\";\n\nimport { useTitle } from './hooks';\n\nexport default function AboutPage() {\n    useTitle('Pixelator | About');\n    \n    return (\n        <div className=\"normal-page-padding\">\n            <div className=\"dummy-height\" />\n            <h1>About</h1>\n            <div className=\"normal-padding\">\n                <p>\n                    Pixelator is an \"image discretizer\" which generates Lennon Arts, written by CaffeinatedProgrammer.\n                </p>\n                <p>\n                    The source code is release under the MIT License.\n                </p>\n            </div>\n        </div>\n    )\n}","const reducer = (state, action) => {\n    switch (action.type) {\n        case \"save_settings\":\n            return Object.assign({}, state, { settings: action.payload });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","const defaultState = {\n    settings: {\n        width: 20,\n        imageWidth: 0,\n        imageHeight: 0,\n        initialColor: ['#000000', '#FFFFFF', '#FFFF00', '#FF0000'],\n        initialEdge: ['#000000'],\n        iterationCount: 50,\n        sampleDistance: 5,\n    }\n};\n\nexport default defaultState;","import React, { useReducer } from 'react';\nimport TopBar from './TopBar';\nimport InputPage from './InputPage';\nimport ResultPage from './ResultPage';\nimport AboutPage from './AboutPage';\nimport './App.css';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport reducer from './reducer';\nimport defaultState from './defaultState';\n\nexport const AppContext = React.createContext();\nexport const DispatchContext = React.createContext();\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, defaultState);\n    \n    return (\n        <AppContext.Provider value={state}>\n            <DispatchContext.Provider value={dispatch}>\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\n                    <div className=\"container\">\n                        <TopBar />\n                        <Switch>\n                            <Route exact={true} path=\"/result\">\n                                <ResultPage />\n                            </Route>\n                            <Route exact={true} path=\"/about\">\n                                <AboutPage />\n                            </Route>\n                            <Route exact={true} path=\"/\">\n                                <InputPage />\n                            </Route>\n                        </Switch>\n                    </div>\n                </BrowserRouter>\n            </DispatchContext.Provider>\n        </AppContext.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}