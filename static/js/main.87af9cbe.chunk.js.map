{"version":3,"sources":["Button.jsx","SquareContainer.jsx","InputForm.jsx","InputPage.jsx","Result.jsx","ResultGuide.jsx","util.js","ResultPage.jsx","App.js","serviceWorker.js","index.js"],"names":["React","forwardRef","props","ref","className","SquareContainer","square","other","InputForm","onSubmit","useState","imageWidth","setImageWidth","imageHeight","setImageHeight","tileWidthCount","setTileWidthCount","nextIndex","color","1","2","3","4","id","initialColor","setInitialColor","imageData","setImageData","canvasRef","useRef","fileInputRef","handleFileButtonClick","useCallback","event","preventDefault","current","click","handleFileInputChange","reader","FileReader","onload","image","src","result","readAsDataURL","target","files","Image","width","height","context","getContext","drawImage","getImageData","data","handleTileWidthCountChange","value","handleColorChange","name","prev","newColor","Object","assign","handleAddColor","handleSubmit","Number","values","type","onChange","Button","onClick","map","_id","key","toString","disabled","InputPage","history","useHistory","convert","parseInt","substr","push","pathname","state","useEffect","document","title","Result","rows","i","j","index","pixel","slice","style","backgroundColor","paddingBottom","flex","array","ResultGuide","mapping","keys","minWidth","minHeight","border","marginRight","getMedian","rValues","Array","fill","gValues","bValues","aValues","forEach","count","length","getSimplifiedImage","a","async","tileSize","Math","floor","newData","k","l","reduce","b","from","concat","getClusteredImage","matrix","toRGB","alpha","Promise","resolve","clusterize","x","y","sum","getResult","centroid","types","splice","repeat","fn","times","distance","initialVector","newCentroidSum","newCentroidCount","item","minIndex","minValue","c","dist","findType","max","ResultPage","location","useLocation","clustered","getImage","colorString","goBack","App","basename","process","exact","path","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87af9cbe.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default React.forwardRef((props, ref) => {\n    return (\n        <button ref={ref} {...props} className=\"button\" />\n    );\n});","import React from \"react\";\n\nimport \"./SquareContainer.css\";\n\nexport default function SquareContainer({square, other}) {\n    return (\n        <div className=\"square-container\">\n            <div className=\"square-other\">{other}</div>\n            <div className=\"square-block\">{square}</div>\n        </div>\n    );\n}","import React, { useCallback, useState, useRef } from \"react\";\nimport \"./InputPage.css\";\nimport Button from \"./Button\";\nimport SquareContainer from \"./SquareContainer\";\nimport SelectFilePlaceholder from \"./SelectFilePlaceholder\";\n\nexport default function InputForm({onSubmit}) {\n    const [imageWidth, setImageWidth] = useState(0);\n    const [imageHeight, setImageHeight] = useState(0);\n    const [tileWidthCount, setTileWidthCount] = useState(20);\n    const [initialColor, setInitialColor] = useState({\n        nextIndex: 5,\n        color: {1: '#000000', 2: '#FFFFFF', 3: '#FFFF00', 4: '#FF0000'},\n        id: [1, 2, 3, 4]\n    });\n    const [imageData, setImageData] = useState();\n    const canvasRef = useRef();\n    const fileInputRef = useRef();\n    const handleFileButtonClick = useCallback((event) => {\n        event.preventDefault();\n        fileInputRef.current.click();\n    }, [fileInputRef]);\n    const handleFileInputChange = useCallback((event) => {\n        const reader = new FileReader();\n        reader.onload = () => image.src = reader.result;\n        reader.readAsDataURL(event.target.files[0]);\n        const image = new Image();\n        image.onload = () => {\n            setImageWidth(image.width);\n            setImageHeight(image.height);\n            if (canvasRef.current) {\n                const context = canvasRef.current.getContext('2d');\n                context.drawImage(image, 0, 0, image.width, image.height);\n                setImageData(context.getImageData(0, 0, image.width, image.height).data);\n            }\n        };\n    }, [canvasRef, setImageData, setImageWidth, setImageHeight]);\n    const handleTileWidthCountChange = useCallback((event) => {\n        setTileWidthCount(event.target.value);\n    }, [setTileWidthCount]);\n    const handleColorChange = useCallback((event) => {\n        event.preventDefault();\n        const name = event.target.name;\n        const value = event.target.value;\n        setInitialColor((prev) => {\n            const newColor = Object.assign({}, prev.color);\n            newColor[name] = value;\n            return {\n                ...prev, color: newColor,\n            }\n        });\n    }, [setInitialColor]);\n    const handleAddColor = useCallback((event) => {\n        event.preventDefault();\n        setInitialColor((prev) => ({\n            ...prev,\n            nextIndex: prev.nextIndex + 1,\n            id: [...prev.id, prev.nextIndex],\n            color: {...prev.color, [prev.nextIndex]: '#000000'},\n        }));\n    }, [setInitialColor]);\n    const handleSubmit = useCallback((event) => {\n        event.preventDefault();\n        onSubmit && onSubmit(imageData, imageWidth, imageHeight, Number(tileWidthCount), Object.values(initialColor.color));\n    }, [onSubmit, tileWidthCount, imageData, imageWidth, imageHeight, initialColor]);\n    \n    return (\n        <SquareContainer\n            other={<form className=\"form\" onSubmit={handleSubmit}>\n                <input className=\"hidden\" ref={fileInputRef} type=\"file\" onChange={handleFileInputChange} />\n                <Button onClick={handleFileButtonClick}>Choose an image</Button>\n                    <div>\n                    <label>Width:</label>\n                    <input\n                        type=\"number\"\n                        onChange={handleTileWidthCountChange}\n                        value={tileWidthCount}\n                    />\n                </div>\n                <div>\n                    <Button onClick={handleAddColor}>Add color</Button>\n                    {initialColor.id.map((_id) =>\n                        <input\n                            key={_id.toString()}\n                            type=\"color\"\n                            value={initialColor.color[_id]}\n                            name={_id}\n                            onChange={handleColorChange}\n                        />\n                    )}\n                </div>\n                <Button disabled={!imageData} type=\"submit\">\n                    Submit\n                </Button>\n            </form>}\n            square={\n                <div className=\"overflow-scroll full\">\n                    <canvas\n                        ref={canvasRef}\n                        width={imageWidth.toString()}\n                        height={imageHeight.toString()}\n                    />\n                </div>\n            }\n        />    \n    );\n}","import React, { useCallback, useEffect } from \"react\";\nimport InputForm from \"./InputForm\";\nimport { useHistory } from 'react-router-dom';\n\nexport default function InputPage(props) {\n    const history = useHistory();\n    const convert = useCallback((initialColor) => {\n        return initialColor.map((color) => {\n            return [\n                parseInt(color.substr(1,2), 16),\n                parseInt(color.substr(3,2), 16),\n                parseInt(color.substr(5,2), 16),\n                255,\n            ];\n        });\n    }, []);\n    const onSubmit = useCallback((data, imageWidth, imageHeight, width, initialColor) => {\n        history.push({\n            pathname: \"/result\",\n            state: {\n                data, imageWidth, imageHeight, width, initialColor: convert(initialColor)\n            },\n        });\n    }, [history, convert]);\n    useEffect(() => {\n        document.title = \"Pixelator\";\n    }, []);\n    \n    return (\n        <div className=\"container\">\n            <InputForm onSubmit={onSubmit} />\n        </div>\n    );\n}","import React from 'react';\nimport './Result.css';\n\nexport default function Result(props) {\n    const { data, width, height } = props;\n    if (!data) return <div />;\n    const rows = [];\n    for (var i=0; i<height; i++) {\n        rows.push([]);\n        for (var j=0; j<width; j++) {\n            const index = 4*(i*width+j);\n            const pixel = data.slice(index, index+4);\n            rows[i].push(\n                <div key={`${i} ${j}`} style={\n                    {\n                        backgroundColor: `rgb(${pixel[0]}, ${pixel[1]}, ${pixel[2]}, ${pixel[3]})`,\n                        width: `calc(100% / ${width})`,\n                        paddingBottom: `calc(100% / ${width})`,\n                        flex: \"0 0 auto\",\n                    }\n                } />\n            )\n        }\n    }\n    \n    return (\n        <div className=\"result-container\">\n            {rows.map(((array, index) => \n                <div className=\"result-line\" key={index.toString()}>{array}</div>      \n            ))}\n        </div>\n    )\n}","import React from \"react\";\n\nimport \"./ResultGuide.css\";\n\nexport default function ResultGuide({mapping}) {\n    return (\n        <div className=\"result-guide-container\">\n            {Object.keys(mapping).map((color) =>\n                <div className=\"result-guide-item\">\n                    <div style={{\n                        backgroundColor: color,\n                        width: \"50px\",\n                        height: \"50px\",\n                        minWidth: \"50px\",\n                        minHeight: \"50px\",\n                        border: \"1px solid black\",\n                        marginRight: \"8px\",\n                    }} />\n                    <p>{mapping[color]}</p>\n                </div>\n            )}\n        </div>\n    );\n}","export function averageData(data) {\n    var sumR = 0;\n    var sumG = 0;\n    var sumB = 0;\n    var sumAlpha = 0;\n    const length = data.length / 4;\n    data.forEach((value, index) => {\n        switch (index % 4) {\n            case 0:\n                sumR += value;\n                break;\n                \n            case 1:\n                sumG += value;\n                break;\n                \n            case 2:\n                sumB += value;\n                break;\n                \n            case 3:\n                sumAlpha += value;\n                break;\n                \n            default:\n                break;\n        }\n    });\n    return [sumR, sumG, sumB, sumAlpha].map((value) => value/length);\n}\n\nexport function getMedian(data) {\n    // rValue means r in rgba, not related to l-values and r-values\n    const rValues = new Array(256).fill(0);\n    const gValues = new Array(256).fill(0);\n    const bValues = new Array(256).fill(0);\n    const aValues = new Array(256).fill(0);\n    data.forEach((value, index) => {\n        switch (index % 4) {\n            case 0:\n                rValues[value]++;\n                break;\n                \n            case 1:\n                gValues[value]++;\n                break;\n                \n            case 2:\n                bValues[value]++;\n                break;\n                \n            case 3:\n                aValues[value]++;\n                break;\n                \n            default:\n                break;\n        }\n    });\n    return [rValues, gValues, bValues, aValues].map((array) => {\n        let count = 0;\n        for (let i=0; i<256; i++) {\n            count += array[i];\n            if (count >= data.length / 8) {\n                return i;\n            }\n        }\n        return 255;\n    })\n}\n\nexport async function getSimplifiedImage(data, imageWidth, imageHeight, width) {\n    const tileSize = Math.floor(imageWidth/width);\n    const height = Math.floor(imageHeight/tileSize);\n    const newData = new Array(width*height);\n    // truncate image at bottom\n    for (var i=0; i<height; i++) {\n        for (var j=0; j<width; j++) {\n            // find out which tile the pixel belongs to\n            for (var k=i*tileSize; k<(i+1)*tileSize; k++) {\n                for (var l=j*tileSize; l<(j+1)*tileSize; l++) {\n                    if (!newData[i*width+j]) {\n                        newData[i*width+j] = [];\n                    }\n                    const pixel = k*imageWidth + l;\n                    newData[i*width+j].push(data.slice(4*pixel, 4*pixel+4));\n                }\n            }\n        }\n    }\n    return newData.map((array) => getMedian(array.reduce((a, b) => Array.from(a).concat(Array.from(b)))))\n                  .reduce((a, b) => a.concat(b));\n}\n\nexport async function getClusteredImage(data, initialColor) {\n    const matrix = [];\n    const toRGB = (pixel) => {\n        const alpha = pixel[3]/255;\n        return alpha ? [pixel[0]*alpha, pixel[1]*alpha, pixel[2]*alpha, 255] : new Array(4).fill(255);\n    };\n    for (var i=0; i<data.length; i+=4) {\n        matrix.push(toRGB(data.slice(i, i+4)));\n    }\n    return new Promise((resolve) => resolve(clusterize(matrix, (x, y) => {\n        let sum = 0;\n        for (let i=0; i<3; i++) {\n            sum += (x[i] - y[i]) * (x[i] - y[i]);\n        }\n        return sum;\n    }, initialColor)));\n}\n\nexport async function getResult(data, initialColor) {\n    const { centroid, types } = await getClusteredImage(data, initialColor);\n    for (const index in types) {\n        data.splice(index*4, 4, ...centroid[types[index]]);\n    }\n    return await data;\n}\n\nconst repeat = (fn, times) => {\n    for (let i=0; i<times; i++) {\n        fn(i);\n    }\n};\n\nexport function clusterize(matrix, distance, initialVector) {\n    let centroid = initialVector;\n    const types = matrix.map((color, index) => 0);\n    const findType = (item, centroid, distance) => {\n        let minIndex = -1;\n        let minValue = -1;\n        centroid.forEach((c, index) => {\n            const dist = distance(item, c);\n            if (dist < minValue || minValue === -1) {\n                minIndex = index;\n                minValue = dist;\n            }\n        });\n        return minIndex;\n    };\n    const k = initialVector.length;\n    repeat(() => {\n        const newCentroidSum = new Array(k).fill(new Array(initialVector[0].length).fill(0));\n        const newCentroidCount = new Array(k).fill(0);\n        for (let i=0; i<matrix.length; i++) {\n            const type = findType(matrix[i], centroid, distance);\n            types[i] = type;\n            newCentroidSum[type] = newCentroidSum[type].map((value, index) => value + matrix[i][index]);\n            newCentroidCount[type]++;\n        }\n        centroid = newCentroidSum.map((value, type) => value.map((color) => color / Math.max(1, newCentroidCount[type])));\n    }, 100);\n    return { centroid, types };\n}\n","import React, { useEffect, useState } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport SquareContainer from './SquareContainer';\nimport Button from './Button';\nimport Result from './Result';\nimport ResultGuide from './ResultGuide';\nimport { getSimplifiedImage, getResult } from './util';\n\nexport default function ResultPage(props) {\n    const location = useLocation();\n    const history = useHistory();\n    const state = location.state;\n    const { data, imageWidth, imageHeight, width, initialColor } = state;\n    const [imageData, setImageData] = useState();\n    \n    useEffect(() => {\n        document.title = \"Pixelator | Result\";\n    }, []);\n    useEffect(() => {\n        const getImage = async () => {\n            const image = await getSimplifiedImage(data, imageWidth, imageHeight, width);\n            const clustered = await getResult(image, initialColor);\n            setImageData(clustered);\n        };\n        getImage();\n    }, [data, imageWidth, imageHeight, width, initialColor]);\n    \n    const mapping = {};\n    if (imageData) {\n        for (var i=0; i<imageData.length; i+=4) {\n            const colorString = `rgb(${imageData[i]}, ${imageData[i+1]}, ${imageData[i+2]})`;\n            if (mapping[colorString]) {\n                mapping[colorString]++;\n            } else {\n                mapping[colorString] = 1;\n            }\n        }\n    }\n    \n    return (\n        <>\n            <SquareContainer\n                square={\n                    <Result\n                        data={imageData}\n                        width={width}\n                        height={Math.floor(imageHeight/Math.floor(imageWidth/width))}\n                    />\n                }\n                other={\n                    <>\n                        <Button onClick={history.goBack}>Go Back</Button>\n                        <ResultGuide mapping={mapping} />\n                    </>\n                }\n            />\n        </>\n    );\n}","import React from 'react';\nimport InputPage from './InputPage';\nimport ResultPage from './ResultPage';\nimport './App.css';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route exact={true} path=\"/result\">\n                    <ResultPage />\n                </Route>\n                <Route exact={true} path=\"/\">\n                    <InputPage />\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}