{"version":3,"sources":["TopBar.jsx","Button.jsx","RoundedButton.jsx","SquareContainer.jsx","SettingItem.jsx","hooks.js","InputForm.jsx","util.js","InputPage.jsx","Result.jsx","ResultGuide.jsx","ResultPage.jsx","AboutPage.jsx","reducer.js","defaultState.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","className","to","React","forwardRef","props","ref","type","others","SquareContainer","square","other","SettingItem","name","children","end","useTitle","title","previousTitleRef","useRef","useEffect","current","document","useSelector","selector","useContext","AppContext","InputForm","onSubmit","state","settings","data","defaultWidth","width","initialImageWidth","imageWidth","initialImageHeight","imageHeight","defaultInitialColor","initialColor","defaultInitialEdge","initialEdge","defaultIterationCount","iterationCount","defaultSampleDistance","sampleDistance","useState","setImageWidth","setImageHeight","tileWidthCount","setTileWidthCount","nextIndex","length","color","map","value","index","reduce","a","b","Object","assign","id","Array","fill","setInitialColor","edge","setInitialEdge","imageData","setImageData","setIterationCount","setSampleDistance","canvasRef","fileInputRef","handleFileButtonClick","useCallback","event","preventDefault","click","handleFileInputChange","reader","FileReader","onload","image","src","result","readAsDataURL","target","files","Image","height","context","getContext","drawImage","getImageData","Math","ceil","max","handleTileWidthCountChange","handleColorChange","prev","newColor","handleAddColor","handleRemoveColor","prevId","lastId","pop","prevColor","handleEdgeChange","newEdge","handleAddEdge","handleRemoveEdge","prevEdge","handleIterationCountChange","handleSampleDistanceChange","handleSubmit","Number","values","putImageData","ImageData","onChange","Button","aria-label","onClick","RoundedButton","_id","key","disabled","toString","getMedian","edges","rValues","gValues","bValues","aValues","totalCount","currentCount","i","euclideanDistance","slice","forEach","array","count","getSimplifiedImage","async","tileSize","floor","newData","j","k","l","pixel","push","from","concat","x","y","sum","toRGB","alpha","getClusteredImage","matrix","Promise","resolve","clusterize","getResult","centroid","types","splice","distance","initialVector","fn","times","repeat","newCentroidSum","newCentroidCount","item","minIndex","minValue","c","dist","findType","InputPage","history","useHistory","saveSettings","dispatch","DispatchContext","payload","useAction","convertedPixel","pathname","Result","hasBorder","rows","style","position","paddingBottom","flex","top","left","right","bottom","border","boxSizing","backgroundColor","ResultGuide","mapping","keys","minWidth","minHeight","marginRight","htmlFor","ResultPage","convert","parseInt","substr","rawInitialColor","rawInitialEdge","useMemo","clustered","getImage","colorString","setHasBorder","handleBorderChange","checked","AboutPage","href","rel","reducer","action","defaultState","createContext","App","useReducer","Provider","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb2aeff5.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nimport \"./TopBar.css\";\n\nexport default function TopBar() {\n    return (\n        <div className=\"top-bar\">\n            <p className=\"title\">Pixelator</p>\n            <Link to=\"/\">\n                <p className=\"link\">Home</p>\n            </Link>\n            <Link to=\"/about\">\n                <p className=\"link\">About</p>\n            </Link>\n        </div>\n    )\n}","import React from \"react\";\n\nexport default React.forwardRef((props, ref) => {\n    const {\n        type,\n        ...others\n    } = props;\n\n    return (\n        <button type={type || \"button\"} ref={ref} {...others} className=\"button\" />\n    );\n});","import React from \"react\";\n\nexport default React.forwardRef((props, ref) => {\n    const {\n        type,\n        ...others\n    } = props;\n\n    return (\n        <button type={type || \"button\"} ref={ref} {...others} className=\"button rounded\" />\n    );\n});","import React from \"react\";\n\nimport \"./SquareContainer.css\";\n\nexport default function SquareContainer({square, other}) {\n    return (\n        <div className=\"square-container\">\n            <div className=\"square-other\">{other}</div>\n            <div className=\"square-block\">{square}</div>\n        </div>\n    );\n}","import React from 'react';\n\nimport \"./SettingItem.css\";\n\nexport default function SettingItem({name, children, end}) {\n    return (\n        <div className=\"flex-container\">\n            <p className=\"flex-fixed setting-name\">{name}</p>\n            <div className=\"flex-expand\">{children}</div>\n            <div className=\"flex-fixed setting-end\">{end}</div>\n        </div>\n    );\n}","import { useContext, useEffect, useRef, useCallback } from 'react';\n\nimport { AppContext, DispatchContext } from './App';\n\nexport const useTitle = (title) => {\n    const previousTitleRef = useRef();\n    useEffect(() => {\n        previousTitleRef.current = document.title;\n        return () => {\n            document.title = previousTitleRef.current;\n        };\n    }, []);\n    useEffect(() => {\n        document.title = title;\n    }, [title]);\n};\n\nexport const useAction = (type) => {\n    const dispatch = useContext(DispatchContext);\n    \n    return useCallback((payload) => {\n        dispatch({\n            type,\n            payload,\n        });\n    }, [dispatch, type]);\n};\n\nexport const useSelector = (selector) => {\n    const state = useContext(AppContext);\n    \n    return selector(state);\n};","import React, { useEffect, useCallback, useState, useRef } from \"react\";\nimport \"./InputPage.css\";\nimport Button from \"./Button\";\nimport RoundedButton from \"./RoundedButton\";\nimport SquareContainer from \"./SquareContainer\";\nimport SettingItem from \"./SettingItem\";\nimport { useSelector } from './hooks';\n\nexport default function InputForm({onSubmit}) {\n    const {\n        data,\n        width: defaultWidth,\n        imageWidth: initialImageWidth,\n        imageHeight: initialImageHeight,\n        initialColor: defaultInitialColor,\n        initialEdge: defaultInitialEdge,\n        iterationCount: defaultIterationCount,\n        sampleDistance: defaultSampleDistance,\n    } = useSelector((state) => state.settings);\n    const [imageWidth, setImageWidth] = useState(initialImageWidth);\n    const [imageHeight, setImageHeight] = useState(initialImageHeight);\n    const [tileWidthCount, setTileWidthCount] = useState(defaultWidth);\n    const [initialColor, setInitialColor] = useState({\n        nextIndex: defaultInitialColor.length,\n        color: defaultInitialColor.map((value, index) => ({[index]: value})).reduce((a, b) => Object.assign({}, a, b), {}),\n        id: new Array(defaultInitialColor.length).fill(0).map((value, index) => index),\n    });\n    const [initialEdge, setInitialEdge] = useState({\n        nextIndex: defaultInitialEdge.length,\n        edge: defaultInitialEdge.map((value, index) => ({[index]: value})).reduce((a, b) => Object.assign({}, a, b), {}),\n        id: new Array(defaultInitialEdge.length).fill(0).map((value, index) => index),\n    });\n    const [imageData, setImageData] = useState(data);\n    const [iterationCount, setIterationCount] = useState(defaultIterationCount);\n    const [sampleDistance, setSampleDistance] = useState(defaultSampleDistance);\n    const canvasRef = useRef();\n    const fileInputRef = useRef();\n    const handleFileButtonClick = useCallback((event) => {\n        event.preventDefault();\n        fileInputRef.current.click();\n    }, [fileInputRef]);\n    const handleFileInputChange = useCallback((event) => {\n        const reader = new FileReader();\n        reader.onload = () => image.src = reader.result;\n        reader.readAsDataURL(event.target.files[0]);\n        const image = new Image();\n        image.onload = () => {\n            setImageWidth(image.width);\n            setImageHeight(image.height);\n            if (canvasRef.current) {\n                const context = canvasRef.current.getContext('2d');\n                context.drawImage(image, 0, 0, image.width, image.height);\n                setImageData(context.getImageData(0, 0, image.width, image.height).data);\n                setSampleDistance(Math.ceil(Math.max(image.width, image.height) / 50));\n            }\n        };\n    }, [canvasRef, setImageData, setImageWidth, setImageHeight]);\n    const handleTileWidthCountChange = useCallback((event) => {\n        setTileWidthCount(event.target.value);\n    }, [setTileWidthCount]);\n    const handleColorChange = useCallback((event) => {\n        event.preventDefault();\n        const name = event.target.name;\n        const value = event.target.value;\n        setInitialColor((prev) => {\n            const newColor = Object.assign({}, prev.color);\n            newColor[name] = value;\n            return {\n                ...prev, color: newColor,\n            }\n        });\n    }, [setInitialColor]);\n    const handleAddColor = useCallback((event) => {\n        event.preventDefault();\n        setInitialColor((prev) => ({\n            ...prev,\n            nextIndex: prev.nextIndex +1,\n            id: [...prev.id, prev.nextIndex],\n            color: {...prev.color, [prev.nextIndex]: '#000000'},\n        }));\n    }, [setInitialColor]);\n    const handleRemoveColor = useCallback((event) => {\n        event.preventDefault();\n        setInitialColor((prev) => {\n            const prevId = prev.id;\n            const lastId = prevId.pop();\n            const prevColor = prev.color;\n            delete prevColor[lastId];\n            return {\n                ...prev,\n                color: prevColor,\n                id: prevId,\n            };\n        });\n    }, [setInitialColor]);\n    const handleEdgeChange = useCallback((event) => {\n        event.preventDefault();\n        const name = event.target.name;\n        const value = event.target.value;\n        setInitialEdge((prev) => {\n            const newEdge = Object.assign({}, prev.edge);\n            newEdge[name] = value;\n            return {\n                ...prev, edge: newEdge,\n            }\n        });\n    }, [setInitialEdge]);\n    const handleAddEdge = useCallback((event) => {\n        event.preventDefault();\n        setInitialEdge((prev) => ({\n            ...prev,\n            nextIndex: prev.nextIndex +1,\n            id: [...prev.id, prev.nextIndex],\n            edge: {...prev.edge, [prev.nextIndex]: '#000000'},\n        }));\n    }, [setInitialEdge]);\n    const handleRemoveEdge = useCallback((event) => {\n        event.preventDefault();\n        setInitialEdge((prev) => {\n            const prevId = prev.id;\n            const lastId = prevId.pop();\n            const prevEdge = prev.edge;\n            delete prevEdge[lastId];\n            return {\n                ...prev,\n                edge: prevEdge,\n                id: prevId,\n            };\n        });\n    }, [setInitialEdge]);\n    const handleIterationCountChange = useCallback((event) => {\n        event.preventDefault();\n        setIterationCount(event.target.value);\n    }, []);\n    const handleSampleDistanceChange = useCallback((event) => {\n        event.preventDefault();\n        setSampleDistance(event.target.value);\n    }, []);\n    const handleSubmit = useCallback((event) => {\n        event.preventDefault();\n        onSubmit && onSubmit(\n            imageData,\n            imageWidth,\n            imageHeight,\n            Number(tileWidthCount),\n            Object.values(initialColor.color),\n            Object.values(initialEdge.edge),\n            Number(iterationCount),\n            Number(sampleDistance),\n        );\n    }, [\n        onSubmit,\n        tileWidthCount,\n        imageData,\n        imageWidth,\n        imageHeight,\n        initialColor,\n        initialEdge,\n        iterationCount,\n        sampleDistance\n    ]);\n    \n    useEffect(() => {\n        if (imageData) {\n            const context = canvasRef.current.getContext('2d');\n            context.putImageData(new ImageData(imageData, imageWidth, imageHeight), 0, 0);\n        }\n    }, []);\n        \n    return (\n        <SquareContainer\n            other={<form className=\"form normal-page-padding\" onSubmit={handleSubmit}>\n                <div className=\"dummy-height\" />\n                <h1>Instructions</h1>\n                <div className=\"normal-padding\">\n                    <p>Select an image with few colors and sufficiently wide margin.</p>\n                    <p>Choose the main colors in the image.</p>\n                    <p>Choose the color of the edge if necessary.</p>\n                    <p>Increase sample distance if the calculation is too slow.</p>\n                </div>\n                <SettingItem name=\"Image\">\n                    <input className=\"hidden\" ref={fileInputRef} type=\"file\" onChange={handleFileInputChange} />\n                    <Button aria-label=\"Choose an image\" onClick={handleFileButtonClick}>Choose an image</Button>\n                </SettingItem>\n                <SettingItem name=\"Tile width\">\n                    <input\n                        type=\"number\"\n                        aria-label=\"Tile width\"\n                        onChange={handleTileWidthCountChange}\n                        value={tileWidthCount}\n                    />\n                </SettingItem>\n                <SettingItem name=\"Iteration Count\">\n                    <input\n                        type=\"number\"\n                        aria-label=\"Iteration count\"\n                        onChange={handleIterationCountChange}\n                        value={iterationCount}\n                    />\n                </SettingItem>\n                <SettingItem name=\"Sample Distance\">\n                    <input\n                        type=\"number\"\n                        aria-label=\"Sample distance\"\n                        onChange={handleSampleDistanceChange}\n                        value={sampleDistance}\n                    />\n                </SettingItem>\n                <SettingItem name=\"Color\" end={\n                    <>\n                        <RoundedButton aria-label=\"add\" onClick={handleAddColor}>+</RoundedButton>\n                        <RoundedButton aria-label=\"remove\" onClick={handleRemoveColor}>-</RoundedButton>\n                    </>\n                }>\n                    {initialColor.id.map((_id) =>\n                        <input\n                            key={`color_${_id}`}\n                            type=\"color\"\n                            value={initialColor.color[_id]}\n                            name={_id}\n                            onChange={handleColorChange}\n                        />\n                    )}\n                </SettingItem>\n                <SettingItem name=\"Edge\" end={\n                    <>\n                        <RoundedButton aria-label=\"add\" onClick={handleAddEdge}>+</RoundedButton>\n                        <RoundedButton aria-label=\"remove\" onClick={handleRemoveEdge}>-</RoundedButton>\n                    </>}>\n                    {initialEdge.id.map((_id) =>\n                        <input\n                            key={`edge_${_id}`}\n                            type=\"color\"\n                            value={initialEdge.edge[_id]}\n                            name={_id}\n                            onChange={handleEdgeChange}\n                        />\n                    )}\n                </SettingItem>\n                <div className=\"normal-padding\">\n                    <Button disabled={!imageData} type=\"submit\">\n                        Submit\n                    </Button>\n                </div>\n            </form>}\n            square={\n                <div className=\"overflow-scroll full\">\n                    <div className=\"dummy-height\" />\n                    <canvas\n                        ref={canvasRef}\n                        width={imageWidth.toString()}\n                        height={imageHeight.toString()}\n                    />\n                </div>\n            }\n        />    \n    );\n}","export function averageData(data) {\n    var sumR = 0;\n    var sumG = 0;\n    var sumB = 0;\n    var sumAlpha = 0;\n    const length = data.length / 4;\n    data.forEach((value, index) => {\n        switch (index % 4) {\n            case 0:\n                sumR += value;\n                break;\n                \n            case 1:\n                sumG += value;\n                break;\n                \n            case 2:\n                sumB += value;\n                break;\n                \n            case 3:\n                sumAlpha += value;\n                break;\n                \n            default:\n                break;\n        }\n    });\n    return [sumR, sumG, sumB, sumAlpha].map((value) => value/length);\n}\n\nexport function getMedian(data, edges) {\n    // rValue means r in rgba, not related to l-values and r-values\n    const rValues = new Array(256).fill(0);\n    const gValues = new Array(256).fill(0);\n    const bValues = new Array(256).fill(0);\n    const aValues = new Array(256).fill(0);\n    \n    for (const edge of edges) {\n        const totalCount = data.length / 4;\n        let currentCount = 0;\n        for (let i=0; i<data.length; i+=4) {\n            const pixel = data.slice(i, i+4);\n            if (euclideanDistance(pixel, edge) < 30) {\n                currentCount++;\n            }\n        }\n        if (currentCount > 0.03 * totalCount) {\n            return edge;\n        }\n    }\n    \n    data.forEach((value, index) => {\n        switch (index % 4) {\n            case 0:\n                rValues[value]++;\n                break;\n                \n            case 1:\n                gValues[value]++;\n                break;\n                \n            case 2:\n                bValues[value]++;\n                break;\n                \n            case 3:\n                aValues[value]++;\n                break;\n                \n            default:\n                break;\n        }\n    });\n    \n    return [rValues, gValues, bValues, aValues].map((array) => {\n        let count = 0;\n        for (let i=0; i<256; i++) {\n            count += array[i];\n            if (count >= data.length / 8) {\n                return i;\n            }\n        }\n        return 255;\n    })\n}\n\nexport async function getSimplifiedImage(data, imageWidth, imageHeight, width, sampleDistance, initialEdge) {\n    const tileSize = Math.floor(imageWidth/width);\n    const height = Math.floor(imageHeight/tileSize);\n    const newData = new Array(width*height);\n    // truncate image at bottom\n    for (var i=0; i<height; i++) {\n        for (var j=0; j<width; j++) {\n            // find out which tile the pixel belongs to\n            for (var k=i*tileSize; k<(i+1)*tileSize; k+=sampleDistance) {\n                for (var l=j*tileSize; l<(j+1)*tileSize; l+=sampleDistance) {\n                    if (!newData[i*width+j]) {\n                        newData[i*width+j] = [];\n                    }\n                    const pixel = k*imageWidth + l;\n                    newData[i*width+j].push(data.slice(4*pixel, 4*pixel+4));\n                }\n            }\n        }\n    }\n    return newData.map((array) => getMedian(array.reduce((a, b) => Array.from(a).concat(Array.from(b))), initialEdge))\n                  .reduce((a, b) => a.concat(b));\n}\n\nfunction euclideanDistance(x, y) {\n    let sum = 0;\n    for (let i=0; i<3; i++) {\n        sum += (x[i] - y[i]) * (x[i] - y[i]);\n    }\n    return sum;\n}\n    \nexport function toRGB(pixel) {\n    const alpha = pixel[3]/255;\n    return alpha ? [pixel[0]*alpha, pixel[1]*alpha, pixel[2]*alpha, 255] : new Array(4).fill(255);\n};\n\nexport async function getClusteredImage(data, initialColor, iterationCount) {\n    const matrix = [];\n    \n    for (var i=0; i<data.length; i+=4) {\n        matrix.push(toRGB(data.slice(i, i+4)));\n    }\n    return new Promise((resolve) => resolve(clusterize(matrix, euclideanDistance, initialColor, iterationCount)));\n}\n\nexport async function getResult(data, initialColor, iterationCount) {\n    const { centroid, types } = await getClusteredImage(data, initialColor, iterationCount);\n    for (const index in types) {\n        data.splice(index*4, 4, ...centroid[types[index]]);\n    }\n    return await data;\n}\n\nconst repeat = (fn, times) => {\n    for (let i=0; i<times; i++) {\n        fn(i);\n    }\n};\n\nexport function clusterize(matrix, distance, initialVector, iterationCount) {\n    let centroid = initialVector;\n    const types = matrix.map((color, index) => 0);\n    const findType = (item, centroid, distance) => {\n        let minIndex = -1;\n        let minValue = -1;\n        centroid.forEach((c, index) => {\n            const dist = distance(item, c);\n            if (dist < minValue || minValue === -1) {\n                minIndex = index;\n                minValue = dist;\n            }\n        });\n        return minIndex;\n    };\n    const k = initialVector.length;\n    repeat(() => {\n        const newCentroidSum = new Array(k).fill(new Array(initialVector[0].length).fill(0));\n        const newCentroidCount = new Array(k).fill(0);\n        for (let i=0; i<matrix.length; i++) {\n            const type = findType(matrix[i], centroid, distance);\n            types[i] = type;\n            newCentroidSum[type] = newCentroidSum[type].map((value, index) => value + matrix[i][index]);\n            newCentroidCount[type]++;\n        }\n        centroid = newCentroidSum.map((value, type) => {\n            if (newCentroidCount[type] !== 0) {\n                return value.map((color) => color / newCentroidCount[type]);\n            } else {\n                return centroid[type];\n            }\n        });\n    }, iterationCount);\n    return { centroid, types };\n}\n","import React, { useCallback } from \"react\";\nimport InputForm from \"./InputForm\";\nimport { useTitle, useAction } from \"./hooks\";\nimport { toRGB } from \"./util\";\n\nimport { useHistory } from 'react-router-dom';\n\nexport default function InputPage(props) {\n    const history = useHistory();\n    const saveSettings = useAction('save_settings');\n    const onSubmit = useCallback(\n        (\n            data,\n            imageWidth,\n            imageHeight,\n            width,\n            initialColor,\n            initialEdge,\n            iterationCount,\n            sampleDistance\n        ) => {\n        saveSettings({\n            data,\n            imageWidth,\n            imageHeight,\n            width,\n            initialColor,\n            initialEdge,\n            iterationCount,\n            sampleDistance,\n        });\n        for (let i=0; i<data.length; i+=4) {\n            const convertedPixel = toRGB(data.slice(i, i+4));\n            data[i] = convertedPixel[0];\n            data[i+1] = convertedPixel[1];\n            data[i+2] = convertedPixel[2];\n            data[i+3] = convertedPixel[3];\n        }\n        history.push({\n            pathname: \"/result\",\n        });\n    }, [history, saveSettings]);\n    \n    useTitle(\"Pixelator\");\n    \n    return (\n        <InputForm onSubmit={onSubmit} />\n    );\n}","import React from 'react';\nimport './Result.css';\n\nexport default function Result(props) {\n    const { data, width, height, hasBorder } = props;\n    if (!data) return <div />;\n    const rows = [];\n    for (var i=0; i<height; i++) {\n        rows.push([]);\n        for (var j=0; j<width; j++) {\n            const index = 4*(i*width+j);\n            const pixel = data.slice(index, index+4);\n            rows[i].push(\n                <div key={`${i} ${j}`} style={{\n                    position: 'relative',\n                    width: `calc(100% / ${width})`,\n                    paddingBottom: `calc(100% / ${width})`,\n                    flex: \"0 0 auto\",\n                }}>\n                    <div style={{\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        border: hasBorder ? '2px solid white' : 'none',\n                        boxSizing: \"border-box\",\n                        backgroundColor: `rgb(${pixel[0]}, ${pixel[1]}, ${pixel[2]}, ${pixel[3]})`,\n                    }} />\n                </div>\n            )\n        }\n    }\n    \n    return (\n        <div>\n            {rows.map(((array, index) => \n                <div className=\"result-line\" key={index.toString()}>{array}</div>      \n            ))}\n        </div>\n    )\n}","import React from \"react\";\n\nimport \"./ResultGuide.css\";\n\nexport default function ResultGuide({mapping}) {\n    return (\n        <div className=\"result-guide-container normal-page-padding\">\n            {Object.keys(mapping).map((color) =>\n                <div\n                    id={color.toString()}\n                    key={color.toString()}\n                    className=\"result-guide-item\"\n                >\n                    <div style={{\n                        backgroundColor: color,\n                        width: \"50px\",\n                        height: \"50px\",\n                        minWidth: \"50px\",\n                        minHeight: \"50px\",\n                        border: \"1px solid black\",\n                        marginRight: \"8px\",\n                    }}/>\n                    <label htmlFor={color.toString()}>{mapping[color]}</label>\n                </div>\n            )}\n        </div>\n    );\n}","import React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport SquareContainer from './SquareContainer';\nimport Result from './Result';\nimport ResultGuide from './ResultGuide';\nimport { getSimplifiedImage, getResult } from './util';\nimport { useTitle, useSelector } from \"./hooks\";\n\nexport default function ResultPage(props) {\n    const convert = useCallback((initialColor) => {\n        return initialColor.map((color) => {\n            return [\n                parseInt(color.substr(1,2), 16),\n                parseInt(color.substr(3,2), 16),\n                parseInt(color.substr(5,2), 16),\n                255,\n            ];\n        });\n    }, []);\n    const {\n        data,\n        imageWidth,\n        imageHeight,\n        width,\n        initialColor: rawInitialColor,\n        initialEdge: rawInitialEdge,\n        iterationCount,\n        sampleDistance,\n    } = useSelector((state) => state.settings);\n    const initialColor = useMemo(() => convert(rawInitialColor), [convert, rawInitialColor]);\n    const initialEdge = useMemo(() => convert(rawInitialEdge), [convert, rawInitialEdge]);\n    const [imageData, setImageData] = useState();\n    \n    useTitle(\"Pixelator | Result\");\n    useEffect(() => {\n        const getImage = async () => {\n            const image = await getSimplifiedImage(data, imageWidth, imageHeight, width, sampleDistance, initialEdge);\n            const clustered = await getResult(image, initialColor, iterationCount);\n            setImageData(clustered);\n        };\n        data && getImage();\n    }, [\n        data,\n        imageWidth,\n        imageHeight,\n        width,\n        initialColor,\n        initialEdge,\n        iterationCount,\n        sampleDistance\n    ]);\n    \n    const mapping = {};\n    if (imageData) {\n        for (var i=0; i<imageData.length; i+=4) {\n            const colorString = `rgb(${imageData[i]}, ${imageData[i+1]}, ${imageData[i+2]})`;\n            if (mapping[colorString]) {\n                mapping[colorString]++;\n            } else {\n                mapping[colorString] = 1;\n            }\n        }\n    }\n    \n    const [hasBorder, setHasBorder] = useState(false);\n    const handleBorderChange = useCallback((event) => {\n        setHasBorder(event.target.checked);\n    }, [setHasBorder]);\n    \n    return (\n        data ? \n            <SquareContainer\n                square={\n                    <>\n                        <div className=\"dummy-height\" />\n                        <Result\n                            hasBorder={hasBorder}\n                            data={imageData}\n                            width={width}\n                            height={Math.floor(imageHeight/Math.floor(imageWidth/width))}\n                        />\n                    </>\n                }\n                other={\n                    <div className=\"normal-page-padding\">\n                        <div className=\"dummy-height\" />\n                        <ResultGuide mapping={mapping} />\n                        <div className=\"normal-page-padding\">\n                            <label htmlFor=\"border-checkbox\">Show border</label>\n                            <input id=\"border-checkbox\" className=\"normal-margin-left\" type=\"checkbox\" checked={hasBorder} onChange={handleBorderChange} />\n                        </div>\n                    </div>\n                }\n            />\n        :\n            <Redirect to=\"/\" />\n    );\n}","import React from \"react\";\n\nimport { useTitle } from './hooks';\n\nimport \"./AboutPage.css\";\n\nexport default function AboutPage() {\n    useTitle('Pixelator | About');\n    \n    return (\n        <div className=\"normal-page-padding\">\n            <div className=\"dummy-height\" />\n            <h1>About</h1>\n            <div className=\"normal-padding\">\n                <p>\n                    Pixelator is an \"image discretizer\" which generates Lennon Arts, written by Caffeinated Programmer.\n                </p>\n                <p>\n                    The <a className=\"source-code\" href=\"https://github.com/caffeinatedprogrammer/pixelator\" target=\"_blank\" rel=\"noopener noreferrer\">source code</a> is release under the MIT License.\n                </p>\n                <div className=\"license\">\n                    <p className=\"mono\">\n                        Copyright 2020 Caffeinated Programmer\n                    </p>\n                    <p className=\"mono\">\n                        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n                    </p>\n                    <p className=\"mono\">\n                        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n                    </p>\n                    <p className=\"mono\">\n                        THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n                    </p>\n                </div>\n            </div>\n        </div>\n    )\n}","const reducer = (state, action) => {\n    switch (action.type) {\n        case \"save_settings\":\n            return Object.assign({}, state, { settings: action.payload });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","const defaultState = {\n    settings: {\n        width: 20,\n        imageWidth: 0,\n        imageHeight: 0,\n        initialColor: ['#000000', '#FFFFFF', '#FFFF00', '#FF0000'],\n        initialEdge: ['#000000'],\n        iterationCount: 50,\n        sampleDistance: 5,\n    }\n};\n\nexport default defaultState;","import React, { useReducer } from 'react';\nimport TopBar from './TopBar';\nimport InputPage from './InputPage';\nimport ResultPage from './ResultPage';\nimport AboutPage from './AboutPage';\nimport './App.css';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport reducer from './reducer';\nimport defaultState from './defaultState';\n\nexport const AppContext = React.createContext();\nexport const DispatchContext = React.createContext();\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, defaultState);\n    \n    return (\n        <AppContext.Provider value={state}>\n            <DispatchContext.Provider value={dispatch}>\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\n                    <div className=\"container\">\n                        <TopBar />\n                        <Switch>\n                            <Route exact={true} path=\"/result\">\n                                <ResultPage />\n                            </Route>\n                            <Route exact={true} path=\"/about\">\n                                <AboutPage />\n                            </Route>\n                            <Route exact={true} path=\"/\">\n                                <InputPage />\n                            </Route>\n                        </Switch>\n                    </div>\n                </BrowserRouter>\n            </DispatchContext.Provider>\n        </AppContext.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}